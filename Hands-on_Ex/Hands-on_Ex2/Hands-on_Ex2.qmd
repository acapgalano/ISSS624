---
title: "Hands-on Exercise 2: Global and Local Measures of Spatial Autocorrelation"
editor: visual
---

## Overview

> Spatial autocorrelation is the term used to describe the presence of systematic spatial variation in a variable and positive spatial autocorrelation, which is most often encountered in practical situations, is the tendency for areas or sites that are close together to have similar values.

This exercise aims to teach us how to compute for Global and Local Measures of Spatial Autocorrelation (GLSA) using R. Specifically, we are taught to compute for the global and local Maron's I and Greary's C. As a by-product, we also learn to simulate with Monte Carlo simulation, to examine patterns of autocorrelation, to detect cold/hot spots using $G_i$ statistics and tp visualize the analysis output.

## Getting Started

### The analytical task

The two datasets to be used in this exercise are:

-   *Hunan* (shapefile) - geospatial data on Hunan province's county-level boundaries

-   *Hunan_2012 (CSV)* - attribute data containing Hunan's local development indicators for 2012

Using the data above, we are tasked to determine the spatial patterns of selected development indicators in Hunan, China.

### Setting the analytical tools 

As done in In-class Exercise 1, we load the necessary packages as shown below.

```{r}
pacman::p_load(sf, tidyverse, spdep, tmap)
```

## Getting the Data Into the R Environment

### Importing shapefile 

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### Importing CSV file 

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Performing relational join

```{r}
hunan <- left_join(hunan, hunan2012) %>% select (1:4, 7,15)
```

::: callout-tip
## LEVEL UP!

**NEW FUNCTION UNLOCKED:** `select()`

This function is used to pick certain variables/features/columns of a DataFrame. In this case, we are choosing to keep the following: *NAME_2, ID_3, NAME_3, ENGTYPE_3, County and GDPPC.*
:::

### Visualizing Regional Development Indicator

To get initially visualize the base of the data we are dealing with, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC for 2012 by using **`qtm()`** of `tmap` package.

```{r}
equal <- tm_shape(hunan) + tm_fill("GDPPC", n = 5, style = "equal", palette = "RdPu") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal interval classification",legend.text.size = 0.5, legend.title.size = 1)

quantile <- tm_shape(hunan) + tm_fill("GDPPC", n = 5, style = "quantile", palette = "RdPu") + tm_borders(alpha = 0.5) + tm_layout(main.title = "Equal quantile classification", legend.text.size = 0.5, legend.title.size = 1)

tmap_arrange(equal, quantile, asp=1,ncol=2)
```

This shows a basic visualization of the distribution of GDPPC values with ranges divided equally or by quantile. But as we learned so far, this is not an accurate depiction since there spatial factors to consider.

## Global Spatial Autocorrelation

### Computing contiguity-based spatial weights

Before we can compute the global spatial autocorrelation statistics, we need to construct spatial weights of the study area. The steps to do so were discussed in [In-class Exercise 1](https://acapgeolano.netlify.app/in-class_ex/in-class_ex1/in-class_ex1 "In-class Exercise 1: Spatial Weights and Applications").

::: callout-note
## LESSON REVIEW!

**Spatial weights** are used to define the neighborhood relationships between the geographical units (in this case, by county) in the study area. Using **contiguity** means two spatial units that share a common border.
:::

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

The function `poly2nb()` above creates the list of neighbors of each area unit. The summary report above shows that there are 88 area units in Hunan. The most connected area has 11 neighbor, while there are two area units with only one neighbor.

### Row-standardized weights matrix

In a the previous exercise, we used the function `nb2listw()` to assign the weights to the neighbor list. The argument `style` sets mode of assigning the weights. For this case, setting it to **"W"** indicates equal weights of $\dfrac{1}{|\{Neighbors\}|}$ assigned to neighboring area units then summing the weighted income values.

::: callout-caution
## Take Note!

While row-standardization is the most intuitive way to summarize the neighbors\' values, it has the drawback of polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, `style=“W”` is used for simplicity but note that other more robust options are available, notably `style=“B”`.

**"B"** stands for ***basic binary encoding***. It was used in the previous exercise.
:::

### Global Spatial Autocorrelation: Moran's I

The package `spdep` provides a function [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html "Moran's I test for spatial autocorrelation") to simply perform Moran's I statistics.

::: callout-note
## LESSON REVIEW!

**Moran's I** is a measure that describes how features differ from the values in the **study area as a whole**. It is defined as:

$$
I = \dfrac{N}{W}\dfrac{\displaystyle\sum^N_{j=1}W_{ij}(x_i-\bar{x})(x_j-\bar{x})}{\displaystyle\sum^N_{i=1}(x_i-\bar{x})^2}
$$

Where:

-   $N$ is the numbe of spatial units

-   $x$ is the variable

-   $\bar{x}$ is the mean of x

-   $w_{ij}$ is a matrix of spatial weights with zeroes on the diagonal

-   $W$ is the sum of all $w_{ij}$
:::

### Implementing Maron's I test 

```{r}
moran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)
```

> **Question: *What statistical conclusion can you draw from the output above?***

Given that the Moran I statistic value is 0.300749970, we know that the observations tend to be similar. The p-value dictates that we reject the null hypothesis, and verify the randomness and normality of the data.

#### Computing Monte Carlo Moran's I 

When doubting the assumptions of Moran I, we can use Monte Carlo's simulation to verify. The code chunk below performs a permutation test for Moran's I statistic by using the function `moran.mc()` of `spdep`. A total of 1000 simulations are performed.

```{r}
set.seed(1234)
bperm = moran.mc(hunan$GDPPC, list = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)
bperm
```

#### Visualizing Monte Carlo's Moran's I

A histogram visualizes the distribution of Moran's I.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq = TRUE, breaks = 20, xlab="Simulated Moran's I")
abline(v=0, col="#FF7F50") 
```

> **Question: *What statistical observation can you draw from the output above?***

The distribution looks close to normally distributed.

> **Challenge: *Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.***

```{r}
bperm_df <- as.data.frame(bperm$res)
ggplot(bperm_df, aes(bperm$res)) + geom_histogram(fill = "#ffb7b1", color = "black") + geom_vline(xintercept = 0)
```

### Global Spatial Autocorrelation: Geary's

The package **`spdep`** provides the function `geary.test()` to perform this test.

::: callout-note
## LESSON REVIEW!

**Geary's C** is a statistic that measures how features differ from their **immediate neighbors**.

It's defined as:

$$
C = \dfrac{(N-1)\displaystyle\sum^n_i\displaystyle\sum^n_j w_{ij}(x_i-x_j)^2}{2W\displaystyle\sum^n_i(x_i-\bar{x})^2}
$$
:::

#### Implementing Geary's C test

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

> **Question: *What statistical conclusion can you draw from the output above?***

Geary's C statistic has a value of 0.6907223 which suggests that the observations tend to be similar.

#### Computing Monte Carlo Geary's C 

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, listw = rswm_q, nsim=999)
bperm

```

#### Visualizing the Monte Carlo Geary's C 

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="#FF7F50") 
```

> **Question: *What statistical conclusion can you draw from the output above?***

The simulations seems to be normally distributed.

## Spatial Correlogram

Spatial correlograms are great to examine patterns of spatial autocorrelation. They show how correlated pairs of spatial observations are when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran\'s I or Geary\'s c) against distance.

### Computing for Moran's I correlogram

Fortunately, the `spdep` package provides a function `sp.correlogram()`. Using the argument `order` we set the lag to 6.

```{r}
MI_corr <- sp.correlogram(wm_q,  hunan$GDPPC, order = 6, method = "I", style = "W")

plot(MI_corr)
```

```{r}
print(MI_corr)
```

> **Question: *What statistical observation can you draw from the plot above?***

The graph suggest that as the distance increases, Moran's I approaches -1, suggesting the values are becoming dissimilar.

### Compute Geary's C correlogram and plot

The same function can be used for Geary's C.

```{r}
GC_corr <- sp.correlogram(wm_q, hunan$GDPPC, order = 6, method = "C", style = "W")

plot(GC_corr)
```

```{r}
print(GC_corr)
```

## Cluster and Outlier Analysis

### Computing local Moran's I 

The function `localmoran()` of the `spdep` package computes $I_i$ values, given a set of $z_i$ values and a `listw` object providing neighbor weighting information for the polygon associated with the $z_i$ values.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

#### Mapping the local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>% rename(Pr.Ii = Pr.z....E.Ii..)

hunan.localMI
```

#### Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Ii", style = "pretty", palette = "RdPu", title = "local moran statistics") + tm_borders(alpha = 0.5) + tm_layout(legend.height = 0.5, legend.width = 0.4)
```

#### Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) + tm_fill(col = "Pr.Ii", breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),  palette="-Reds", title = "local Moran's I p-values") + tm_borders(alpha = 0.5) + tm_layout(legend.width = 0.4, legend.height = 0.5)
```

#### Mapping both local Moran's I values and p-values 

The choropleth shows there is evidence for both positive and negative $l_i$ values. However, it is useful to consider the p-values for each of these values, as consider above.

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii",  style = "pretty", title = "local moran statistics", palette = "-PiYG") + tm_borders(alpha = 0.5) + tm_layout(legend.height = 0.35, legend.width = 0.4)

pvalue.map <- tm_shape(hunan.localMI) + tm_fill(col = "Pr.Ii", breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette="-Reds", title = "local Moran's I p-values") + tm_borders(alpha = 0.5) + tm_layout(legend.height = 0.35, legend.width = 0.4)


tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation.

### Plotting Moran scatterplot

The code chunk below uses the function `moran.plot` to create a Moran scatterplot.

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q, labels = as.character(hunan$County), xlab = "GDPPC 2012", ylab = "Spatially Lag GDPPC 2012")
```

![](images/paste-C390AE2D.png)

By using the interpretation figure above, we can determine the quadrant representations of the scatterplot.

### Plotting Moran scatterplot with standardized variable 

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

::: callout-important
## LEVEL UP!

**FUNCTIONS UNLOCKED: `scale()`** , `as.vector`

`scale()` is a function that centers and scales the columns of numeric matrix by subtracting the mean (omitting NAs) from the corresponding columns, and dividing the (centered) variable by their standard deviations.

`as.vector` converts a distributed matrix into a non-distributed vector.

These functions are used together to normalize or standaradize the data.
:::

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County), xlab="z-GDPPC 2012", ylab="Spatially Lag z-GDPPC 2012")
```

### Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))

# Centering variable of interest
DV <- hunan$GDPPC - mean(hunan$GDPPC)   

# Centering local Moran
C_mI <- localMI[,1] - mean(localMI[,1])   

# Setting significance level
signif <- 0.05

# HH, LL, LH, HL Categories

quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 2      
quadrant[DV <0 & C_mI>0] <- 1
quadrant[DV >0 & C_mI<0] <- 3

# Non-significan Moran in category 0
quadrant[localMI[,5]>signif] <- 0
```

### Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#9f43c7", "#d2b1e0", "#fcd4d1", "#ff6969")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#9f43c7", "#d2b1e0", "#fcd4d1", "#ff6969")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

## Hot Spot and Cold Spot Area Analysis 

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

::: callout-note
## LESSON REVIEW!

**Getis and Ord's G-statistics** looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighborhood range also share high values too.
:::

### Deriving distance-based weight matrix

First, we need to define a new set of neighbors. While the spatial autocorrelation considered units which shared borders, **for Getis-Ord we are defining neighbours based on distance.**

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix

### Deriving the centroid 

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])

latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])

coords <- cbind(longitude, latitude)
```

#### Determine the cut-off distance

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))

summary(k1dists)
```

#### Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
wm62_lw <- nb2listw(wm_d62, style = "B")
summary(wm62_lw)
```

### Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## Computing $G_i$ statistics 

### $G_i$ statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>% rename(gstat_fixed = as.matrix.gi.fixed.)
```

### Mapping $G_i$ values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed",  style = "pretty", palette="-PiYG", title = "local Gi") + tm_borders(alpha = 0.5) + tm_layout(legend.height = 0.35, legend.width = 0.4)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

> **Question: *What statistical observation can you draw from the Gi map above?***

### $G_i$ statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>% rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### Mapping $G_i$ values with adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive",  style = "pretty", palette="-PiYG", title = "local Gi") + tm_borders(alpha = 0.5) + tm_layout(legend.height = 0.35, legend.width = 0.4)

tmap_arrange(gdppc, Gimap, asp=1,  ncol=2)
```

> **Question: *What statistical observation can you draw from the Gi map above?***

In comparison to the previous $G_i$ graph using the fixed distance weights, the $G_i$ graph with the adaptive distance weights is more convincing spatially in a sense that the cold and hot spots are grouped together. The $G_i$ colors are gradually (or seemingly in a gradient manner) changing by neighbor. There is one light green spot that is seemingly out of place between light pinks.
