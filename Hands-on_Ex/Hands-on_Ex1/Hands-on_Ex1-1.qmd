---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
editor: visual
---

# Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using the appropriate R packages.

# Getting Started

The code chunk below installs and loads `sf` and `tidyverse` packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

-   [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) - checks to see if a package is installed, if not it attempts to install the package

# Importing Geospatial Data

In this section, I will learn how to import geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of the `sf` package.

## Importing Polygon Feature Data in Shapefile Format

Using the ESRI shapefile **MP14_SUBZONE_WEB_PL**, I used the following code chunk to import it as a [polygon feature]{.underline} data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

The following are arguments of `st_read()`:

-   `dsn` - defines the data path

-   `layer` - declares the shapefile name

## Importing Polyline Feature Data in Shapefile Format

Using the ESRI shapefile **CyclingPath**, I used the following code chunk to import it as a [line feature]{.underline} data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPath")
```

::: callout-note
*The instructions stated to use the layer value "CyclingPathGazette" but I used "CyclingPath" instead.*
:::

## Importing GIS Data in KML Format

Using the KML file **pre-schools-location-kml**, I used the following code chunk to import it as a [point feature]{.underline} data frame.

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

Compared to the other two shapefiles imported earlier, the complete file path is given for a KML file.

# Content of A Simple Feature Data Frame

## Working with `st_geometry()`

This provides basic feature information.

```{r}
st_geometry(mpsz)
```

## Working with `glimpse()`

This reveals the data type of each field.

```{r}
glimpse(mpsz)
```

## Working with `head()` 

This displays the first `n` rows of data in the data frame.

```{r}
head(mpsz, n=5)
```

# Plotting the Geospatial Data

-   **Plotting according to the different geospatial features**

```{r}
plot(mpsz)
```

-   **Plotting only the geometry**

```{r}
plot(st_geometry(mpsz))
```

-   **Plotting by a specific attribute**

```{r}
plot(mpsz["PLN_AREA_N"])
```

# Working with Projection

**Projection transformation** is an important process for geospatial data. In order to perform geoprocessing using two different geospatial data, both must be projected using a similar coordinate system.

## Assigning EPSG Code to a Simple Feature Data Frame

```{r}
st_crs(mpsz)
```

As shown in `ID["EPSG",9001]`, the EPSG code is 9001 but it should be **3414** for SVY21.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

::: callout-warning
| Warning: st_crs\<- : replacing crs does not reproject data; use st_transform for that 

`st_set_crs()` changes the coordinate reference system but doesn't transform the data. Transformation/reprojection is needed for instances that require distance.
:::

```{r}
st_crs(mpsz3414)
```

As shown in `ID["EPSG",3414]`, the EPSG code is now changed to **3414**.

## Transforming the projections of preschool from wgs84 to svy21

```{r}
st_geometry(preschool)
```

```{r}
preschool <- st_transform(preschool, crs=3414)
```

```{r}
st_geometry(preschool)
```

# Importing and Converting Aspatial Data

## Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

## Creating a Simple Feature Data Frame From an Aspatial Data Frame 

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude","latitude"),crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

# Geoprocessing with `sf` Package

## Buffering

> ***Scenario:**
>
> The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 meters of reserved land on the both sides of the current cycling path. You are tasked to determine the extent of land that needs to be acquired and their total area.*

**Solution:**

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)

buffer_cycling$AREA <- st_area(buffer_cycling)

sum(buffer_cycling$AREA)
```

## Point-in-polygon count

> **Scenario:**
>
> A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**Solution:**

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool))

summary(mpsz3414$`PreSch Count`)

```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

> [***DIY***]{.underline}***: Calculate the density of pre-schools by planning subzone.***

**Solution:**

```{r}
mpsz3414$Area <- mpsz3414 %>% st_area()
```

```{r}
head(mpsz3414, n=1)
```

```{r}
mpsz3414 <- mpsz3414 %>% 
    mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# Exploratory Data Analysis

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-schools evenly distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

> [***DIY***]{.underline}***: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.***

**Solution:**

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`), y = as.numeric(`PreSch Count`)))+
  geom_point() +
  labs(title = "Are there too many pre-schools in certain areas?", subtitle = "The relationship between the count and density should show if those \n with more pre-schools are too dense in an area or if those with less \n have room for more.",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
