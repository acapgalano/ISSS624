---
title: "Hands-on Exercise 2: Choropleth Mapping with R"
editor: visual
---

# Overview

## Getting Started

The code chunk below installs and loads `sf` , `tmap` and `tidyverse` packages into R environment. The newly introduced package [`tmap`](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html) stands for *thematic maps* and*,* which from the name itself, helps generate map plots.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

# Importing Data to R

## Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")

mpsz
```

## Attribute Data

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## Data Preparation

### Data Wrangling 

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

### Joining Attribute Data to Geospatial Data

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# Chloropleth Mapping Using `tmap`

## Quick Way: `qtm()`

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## Using `tmap`'s elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

### Drawing a base map

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
```

### Drawing a chloropleth map using `tm_polygons()` 

```{r}
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
```

### Drawing chloropleth map using `tm_fill()` and `tm_border()` 

```{r}
tm_shape(mpsz_pop2020)+ tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY") + tm_borders(lwd = 0.1,  alpha = 1)
```

## Data Classification Methods of `tmap`

### Using built-in classification methods

-   Method: `jenks`

```{r}
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY",
          n = 5, style = "jenks") + tm_borders(alpha = 0.5)
```

-   Method: `equal`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

> [***DIY***]{.underline}***: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.***

-   Method: `kmeans`

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY",
              n = 5, style = "kmeans") + tm_borders(alpha = 0.5)
    ```

```{=html}
<!-- -->
```
-   Method: `headtails`

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY",
              n = 5, style = "headtails") + tm_borders(alpha = 0.5)
    ```

-   Method: `pretty`

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY",
              n = 5, style = "pretty") + tm_borders(alpha = 0.5)
    ```

    **Observations**:

-   The methods `pretty` and `equal` are both visually dominated by the lighted tone. This is because the dependency values are all mostly at the lower end of the range set by the method.

-   The methods `kmeans` and `jenks` both have a more spread coloring but still have differences in which subzones are set as a particular color.

-   The method `headstails` has lesser classes or groups of colors, and seems to be leaning towards the lower end of the spectrum.

-   It's important to choose the classification method that best represents the data and how it should be grouped as classes.

> ***DIY:** Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e.Â 2, 6, 10, 20). Compare the output maps, what observation can you draw?*

Using the classification method `jenks`, we have the following graphs with different number of classes:

-   n = 3

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 3, style = "jenks") + tm_borders(alpha = 0.5)
    ```

-   n = 5

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 5, style = "jenks") + tm_borders(alpha = 0.5)
    ```

-   n = 7

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 7, style = "jenks") + tm_borders(alpha = 0.5)
    ```

-   n = 9

    ```{r}
    tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY", n = 9, style = "jenks") + tm_borders(alpha = 0.5)
    ```

**Observation:**

-   Having a lesser number of classes has the tendency to group a bunch of the subzones into just one class, which may not be an accurate representation of reality.

-   Too many classes will create groups with only one colored subzone, which may also not be an accurate representation.

### Using custom breaks

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) + tm_borders(alpha = 0.5)
```

## Color Scheme

### Using ColorBrewer palette

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") + tm_borders(alpha = 0.5)
```

By adding `-` before the palette, the colors can go in reverse as shown below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "-Blues") + tm_borders(alpha = 0.5)
```

As another example, we have the `greens` palette.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Greens") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

## Map Layouts

### Map Legend

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### Map Style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### Cartographic Furniture

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## Drawing Small Multiple Chloropleth Maps

### By assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

### By defining a group-by variable in `tm_facets()`

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### By creating multiple stand-alone maps with `tmap_arrange()`

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## Mapping Spatial Object Meeting a Selection Criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
